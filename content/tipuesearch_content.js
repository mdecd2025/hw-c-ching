var tipuesearch = {"pages": [{'title': 'About', 'text': '課程名稱: 協同產品設計實習 - Collaborative Product Design Practice \n 41023205的作業網站:  https://mdecd2025.github.io/hw-c-ching/ \n 41023205的作業倉儲:  https://github.com/mdecd2025/hw-c-ching \n \n 課程代號: cd2025 \n Teams 線上教學: \n 以 "學號@nfu.edu.tw" 登入 \xa0 https://login.microsoftonline.com/ \xa0 Office 365 \n Teams 團隊代碼:\xa0 p5z4eku \n \n 課程評分: \n Homework (30%) - 每週至少提交兩次與課程進度有關的內容, 完成後填回自評表單 \n Exam (40%) - 建立包含操作流程影片、心得以及提供檔案下載的網頁後填回自評表單 \n Final Report (30%) - 利用網頁內容進行簡報並提交 pdf 格式書面報告, 完成後填回自評表單 \n \n', 'tags': '', 'url': 'About.html'}, {'title': 'Tasks', 'text': '', 'tags': '', 'url': 'Tasks.html'}, {'title': 'Tasks1', 'text': '自行製作可攜程式系統 \n 此作業的目的在展示如何利用既有的 Python 可攜系統建立各版本的 Python 可攜環境. \n  假如檔案小於 5mb, 將 mp4 檔案放入 downloads 目錄後取出  \n \n \n', 'tags': '', 'url': 'Tasks1.html'}, {'title': 'list', 'text': '列出2b學員作業網站與倉儲連結: \n 1 add to 100 \n  導入 brython 程式庫  \n \n \n \n \n  啟動 Brython  \n \n \n \n  導入 FileSaver 與 filereader  \n \n \n \n \n  導入 ace  \n \n \n \n \n \n \n  導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫  \n \n \n \n \n \n \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n \n \n \n  add 1 to 100 開始  \n \n \n  add 1 to 100 結束 \n  editor1 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor1 結束   ##########################################  \n 列出2b分組網站與倉儲連結: \n 1 add to 100 cango_three_gears BSnake AI Tetris \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n  add 1 to 100 part2 開始  \n \n \n  add 1 to 100 part2 結束 \n  editor2 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n \n', 'tags': '', 'url': 'list.html'}, {'title': 'ipV6設定', 'text': '\n  editor2 結束  \n ipv6: 2001:288:6004:17:fff1:cd25:0000:b003 \n gateway: 2001:288:6004:17::254 \n dns server: \n 2001:288:6004:17::3 \n 2001:b000:168::1 \n \n \n \n \n', 'tags': '', 'url': 'ipV6設定.html'}, {'title': 'Tasks2', 'text': '使用 SSH 協定執行作業倉儲的推送 \n  假如檔案小於 5mb, 將 mp4 檔案放入 downloads 目錄後取出  \n \n \n', 'tags': '', 'url': 'Tasks2.html'}, {'title': 'W3', 'text': '列出各班目前尚未納入分組的學員名單: \n 1 add to 100 \n  導入 brython 程式庫  \n \n \n \n \n  啟動 Brython  \n \n \n \n  導入 FileSaver 與 filereader  \n \n \n \n \n  導入 ace  \n \n \n \n \n \n \n  導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫  \n \n \n \n \n \n \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n \n \n \n  add 1 to 100 開始  \n \n \n  add 1 to 100 結束 \n  editor1 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor1 結束   ########################################## ', 'tags': '', 'url': 'W3.html'}, {'title': 'Tasks3', 'text': '', 'tags': '', 'url': 'Tasks3.html'}, {'title': 'Onshape', 'text': '\n \n', 'tags': '', 'url': 'Onshape.html'}, {'title': 'Tasks4', 'text': 'webots四連桿練習 \n  假如檔案小於 5mb, 將 mp4 檔案放入 downloads 目錄後取出  \n \n \n', 'tags': '', 'url': 'Tasks4.html'}, {'title': 'Tutorial 1', 'text': "https://cyberbotics.com/doc/guide/tutorial-1-your-first-simulation-in-webots \n 教學重點摘要 \n 1.A world is stored in a file having the\xa0 .wbt ,and t he world files must be stored directly in a directory called\xa0 worlds. \n 世界儲存在具有 .wbt 副檔名的檔案中且世界檔案必須直接儲存在名為的目錄中 worlds \n \n 2.Webots nodes stored in world files are organized in a tree structure called the\xa0scene tree. The scene tree can be viewed in two sub-windows of the main window: the \xa0 3D view \xa0(at the center of the main window) is the 3D representation of the scene tree and the\xa0 scene tree view \xa0(on the left) is the hierarchical representation of the scene tree. The\xa0 scene tree view \xa0is where the nodes and fields can be modified. \n 儲存在世界文件中的Webots節點以稱為場景樹的樹狀結構來組織。場景樹可以在主視窗的兩個子視窗中查看： 3D 視圖 是場景樹的3D表示， 場景樹視圖 是場景樹的層次結構表示。 場景 樹視圖 是可以修改節點和欄位的地方。 \n \n WorldInfo : 包含模擬的全域參數 \n Viewpoint : 定義主視點相機參數 \n TexturedBackground : 定義場景的背景 \n TexturedBackgroundLight : 定義與上述背景相關的光 \n RectangleArena : 定義您在該場景中迄今為止看到的唯一物件 \n \n 3.In the\xa0 scene tree view , the fields are displayed in a different color. \n 在 場景樹視圖 中，如果欄位與其預設值不同，則以不同的顏色顯示 \n 4.When a Webots world is modified with the intention of being saved,  it is fundamental that the simulation is first paused and reloaded to its initial state , i.e. the virtual time counter on the main toolbar should  show 0:00:00:000 . Otherwise at each save, the position of each 3D object can accumulate errors. Therefore, any modification of the world should be performed in that order:\xa0 pause, reset, modify and save the simulation . \n 當修改 Webots 世界並希望保存時， 至關重要 的是首先 暫停模擬並重新加載到其初始狀態 ，即主工具列上的虛擬時間計數器應 顯示 0:00:00:000 。否則，每次儲存時，每個 3D 物件的位置都會累積錯誤。因此，對世界的任何修改都應按照以下順序進行： 暫停、重置、修改和保存模擬 。 \n 5.The\xa0 controller \xa0field of a\xa0 Robot \xa0node specifies which controller is currently associated to the robot.  Note that the same controller can be used by several robots, but a robot can only use one controller at a time.  Each controller is executed in a separate child process usually spawned by Webots. Because they are independent processes, controllers don't share the same address space, and may run on different processor cores. \n controller 節點的欄位指定 Robot 哪個控制器目前與機器人相關聯。請注意， 同一個控制器可以被多個機器人使用，但一個機器人一次只能使用一個控制器 。每個控制器通常由 Webots 產生的單獨子進程中執行。由於它們是獨立的進程，因此控制器不共享相同的位址空間，並且可能在不同的處理器核心上運行。 \n 6.The robots wheels are often controlled using velocity. In order to control the motors of the wheels in speed you need to set the target position to the infinity and to set the desired speed \n 機器人的輪子通常透過速度來控制，而不是透過位置來控制。為了控制車輪馬達的速度，您需要將目標位置設定為無限大，並設定所需的速度。 \n 7.Above the code area.Compilation errors are displayed in  red  in the console. If there are any, fix them and retry to compile. Then, reload the world. \n 編譯錯誤在控制台中以 紅色 顯示。如果有的話，請修復它們並重試編譯。然後，重新加載世界。 \n \n", 'tags': '', 'url': 'Tutorial 1.html'}, {'title': 'Tutorial 2', 'text': 'https://cyberbotics.com/doc/guide/tutorial-2-modification-of-the-environment \n \n 環境修改-教學重點摘要 \n 1.\xa0實體節點 \n Webots 設計模擬時，一個重要的步驟是將各種實體分解為單獨的剛體。要定義剛體，您必須建立一個實體節點。在這個節點裡面你將設定與剛體的特性相對應的不同的子節點。下圖描繪了剛體及其子節點。實體節點的圖形表示由填滿其清單的形狀節點定義 children 。碰撞邊界在其欄位中定義 boundingObject 。圖形表示和碰撞形狀通常但不一定相同。最後，此 physics 欄位定義物件是屬於動態環境還是靜態環境。所有這些子節點都是可選的，但 physics 欄位需要 boundingObject 定義。 \n \n 2. DEF-USE機制 \n 允許在一個地方定義一個節點並在場景樹的其他地方重複使用該定義。這有助於避免世界文件中相同節點的重複。此外，它還允許使用者同時修改多個物件。 \n 更改 radius 第一個 Sphere 節點的欄位也會修改其 boundingObject 。 \n 為了方便起見，該 boundingObject 欄位也接受 Shape 節點（而不是直接接受 Sphere 節點）。也可以在 Shape 層級使用相同的  DEF-USE  機制，如下圖所示。目前最大的好處是能夠直接將此形狀用於圖形目的。 \n \n', 'tags': '', 'url': 'Tutorial 2.html'}, {'title': 'Tutorial 3', 'text': 'https://cyberbotics.com/doc/guide/tutorial-3-appearance \n 外觀-教學重點摘要 \n 1. 燈 \n 照明由 光源節點 和 背景 決定。有三種類型的光源節點： DirectionalLight ， PointLight 和 SpotLight 。  DirectionalLight 模擬無限遠的光（例如：太陽）， PointLight 模擬從單點發出的光（例如：燈泡）， SpotLight 模擬錐形光（例如：手電筒）。 \n \n 2. 從磁碟添加紋理 \n 將局部可用的紋理應用到球上 \n 步驟: \n 1.新增 PBRAppearance 節點 \n 2.在 PBRAppearance 節點的欄位中新增一個 ImageTexture 節點 \n 3.使用按鈕將項目新增至 ImageTexture 的欄位 \n 4.然後使用“ 選擇 ”按鈕設定新新增項目的值 \n 5.按照路徑找到保存紋理的位置並選擇 \n', 'tags': '', 'url': 'Tutorial 3.html'}, {'title': 'Tutorial 4', 'text': 'https://cyberbotics.com/doc/guide/tutorial-4-more-about-controllers \n 關於控制器-教學重點摘要 \n 建立新世界與控制器步驟: \n 1. 將先前的世界儲存為 collision_avoidance.wbt。 \n 2. 從「檔案」菜單中選擇「新建」>「新建機器人控制器」，並命名為 epuck_avoid_collision。 \n 3. 在 E-puck 節點的 controller 欄位中，將控制器設定為新建立的 epuck_avoid_collision。 \n', 'tags': '', 'url': 'Tutorial 4.html'}, {'title': 'Tutorial 5', 'text': 'https://cyberbotics.com/doc/guide/tutorial-5-compound-solid-and-physics-attributes \n 複合固體和物理屬性-教學重點摘要 \n 1. 複合固體 \n 透過 聚合形狀節點 ，可以建立比我們以前見過的更複雜的實體節點。實體的物理屬性和圖形屬性都可以由多個形狀節點組成，每個Shape節點都可以放置在Pose節點中，以改變其相對位置和方向。 群組節點也可用於對多個子節點進行分組。 \n \xa0 \n 2. 物理屬性 \n 我們可以透過以下方式設定 Solid 節點的物理屬性： \n 質量與密度只能設定其中一個，另一個需設為 -1 \n 1.  mass ：設定固體的總質量（單位：公斤） 2.  density ：設定固體的密度（單位：公斤/立方公尺），與體積相乘得到總質量。 \n 預設情況下，實體節點的質心設定在其原點（由實體的平移場定義）。可以使用物理節點的欄位 (centerOfMass) 來修改質心。質心是相對於固體的原點指定的。 \n 3.\xa0設定旋轉 \n 透過  Pose  節點的  rotation  欄位，我們可以設定物體的旋轉: \n 旋轉格式：使用歐拉軸與角度表示法。 \n 前三個值：定義旋轉軸的單位向量。 \n 第四個值：定義繞該軸的旋轉角度（單位：弧度）。 \n 4.選擇邊界物件 \n Sphere （球體）：效率最高。 \n Box （方塊）：效率較高。 \n Capsule （膠囊體）：效率中等。 \n Cylinder （圓柱體）：效率較低。 \n 不建議使用  IndexedFaceSet ，因為其效率較低，且可能存在一些問題 \n 5.\xa0設定接觸屬性 \n 當兩個固體發生碰撞時，可以使用  ContactProperties  節點來設定接觸行為: \n 1.  設定材料類別 ：透過  contactMaterial  欄位設定固體的材料類別。 \n 2.  設定摩擦力 ：在  ContactProperties  節點中設定  coulombFriction  欄位來調整摩擦力。 \n 6.\xa0設定物理參數 \n 在  WorldInfo  節點中，可以設定以下物理參數： \n 1.  basicTimeStep ：設定物理步驟的時間間隔（單位：毫秒）。 \n 建議值：8 至 16 毫秒 \n 2.  ERP（Error Reduction Parameter） ：設定誤差修正參數。 \n 3.  CFM（Constraint Force Mixing） ：設定約束力混合參數。 \n', 'tags': '', 'url': 'Tutorial 5.html'}, {'title': 'Tutorial 6', 'text': 'https://cyberbotics.com/doc/guide/tutorial-6-4-wheels-robot \n *** 四輪機器人- 教學重點摘要 *** \n \n 1. 建立機器人結構 機器人由五個主要的  Solid  節點組成： \n 1.  Robot （機器人本體）：作為根節點，包含車身和四個輪子。 \n 2. Wheel1  至  Wheel4 （四個輪子）：每個輪子由  HingeJoint  節點連接，並包含  RotationalMotor  來驅動。 \n 每個輪子使用以下結構： \n \n \n HingeJoint ：定義輪子與車身的旋轉關聯。 \n \n \n Solid ：輪子的實體節點。 \n \n \n Shape ：輪子的外觀，使用  Cylinder  幾何形狀 。 \n \n \n Physics ：輪子的物理屬性。 \n \n \n 2. 設定輪子參數 每個  HingeJoint  節點需要設定以下參數： \n \n \n jointParameters ：設定旋轉軸的位置和方向。 \n \n \n device ：包含  RotationalMotor  節點，用於控制輪子的旋轉。 \n \n \n endPoint ：指向輪子的  Solid  節點。 \n \n \n \n 3. 感應器 \n 4. 控制器 \n 5. 控制器程式碼 \n', 'tags': '', 'url': 'Tutorial 6.html'}, {'title': 'Tutorial 7', 'text': 'https://cyberbotics.com/doc/guide/tutorial-7-your-first-proto \n 第一個 PROTO- 教學重點摘要 \n 複製機器人定義:將world檔案中對機器人的定義移至 PROTO 檔案中，且允許使用此機器人，而無需完全複製和貼上其定義 \n 1. 建立 PROTO 檔案 \n 在專案的  protos  資料夾中建立一個名為  FourWheelsRobot.proto  的新檔案。 \n 在檔案中加入以下基本結構： \n VRML_SIM R2023a utf8 PROTO FourWheelsRobot [   # 在此定義可調整的欄位 ] {   # 在此放置機器人結構 } \n 將先前在  4_wheels_robot.wbt  中建立的   Robot   節點（包含其子節點）複製並貼上至  PROTO  的  {}  區塊中 \n 2. 使用 PROTO 節點 \n \n 3.\xa0新增字段 \n \n \n 在  PROTO  節點中介面中" [ \xa0\xa0 ] " 之間的部分 新增欄位並將它們與內部欄位連結起來 \n \n \n 要連結字段，應該使用  IS  關鍵字，只需將 Robot 節點的 translation x y z 和字段替換為： rotation x y z angle \n \n \n Robot節點的Physicsmass節點的字段由以下方式設定： \n mass IS bodyMass \n \n \n', 'tags': '', 'url': 'Tutorial 7.html'}, {'title': 'Tutorial 8', 'text': 'https://cyberbotics.com/doc/guide/tutorial-8-the-supervisor \n The Supervisor - 教學重點摘要 \n 1.\xa0 設定環境並新增Supervisor \n 1.創建一個新的  Webots  專案資料夾，命名為  my_supervisor 。 \n 2.在專案中建立一個新的世界檔案  my_supervisor.wbt ，並添加一個矩形地板作為場景。 \n 3.將機器人加入場景，並刪除其內建的控制器。 \n 4.新增一個名為  supervisor  的機器人節點，並將其  supervisor  欄位設為  TRUE 。 \n 5.為  supervisor  機器人創建一個新的控制器  supervisor_controller.py ，並將其指定為  supervisor  的控制器。 \n 2. 使用Supervisor移動物體 \n', 'tags': '', 'url': 'Tutorial 8.html'}, {'title': 'Tasks5', 'text': '', 'tags': '', 'url': 'Tasks5.html'}, {'title': 'obj.檔案匯入', 'text': '1.先將會製好的圖檔匯出成 obj. 檔 \n \n 2.打開webot 首先:新增 Robot >在 Robot裡新增children>在children裡新增Solid > 在 Solid 裡新增 children \n > 在 children裡新增Shape>接著在Shape下的 geometry NULL 裡新增 Mesh >最後滑鼠點url兩下即可新增檔案 \n \n', 'tags': '', 'url': 'obj.檔案匯入.html'}, {'title': 'Tasks6', 'text': '', 'tags': '', 'url': 'Tasks6.html'}, {'title': 'Homework', 'text': '作業 (30%) \n HW1 (5%):  建立由 Box 組成的平面四連桿機構 Webots 模擬場景 \n part1: \n 請各學員在 USB 隨身碟或個人電腦上完成 cd2025 課程所需的可攜系統配置: \n 下載  portable_wcm2025.7z  (330MB, 解開壓縮後 1.4GB) \n Webots_2025a.7z  (1.5 GB, 解開後約為 2.9GB, 可單獨運作) \n Webots_2025a_web.7z  (171 MB, 解開壓縮後約為 1GB, 必須連網運作) \n Blender4.2.7z \n part2: \n 請各學員完成可攜程式系統配置後, 利用 Webots R2025a 中寬度與高度都為 0.1m 的 box 物件建立一個簡單的平面四連桿機構模擬場景. \n base (基座) 長度 1m, link1 長度 0.4m, link2 長度 0.6m, link3 長度 0.9m, 各轉軸均為 HingeJoint, joint1 旋轉速度設定為 1radian/sec. \n part3: \n 模擬場景啟動後, 按下 s 鍵機構開始作動, 按下 p 鍵後機構暫停. \n 參考資料: \n cd2025_hw1_demo.7z \n HW2 (5%):  建立由 CAD 繪製零件組成的平面四連桿機構 Webots 模擬場景 \n 各學員請利用 CAD 系統依據 HW1 的連桿尺寸與運動方式, 配置適當大小的旋轉軸以及基座後, 利用 Webots R2025a 完成一個簡單的平面四連桿機構模擬場景. \n 參考資料: \n fourbar_slvs.7z \n HW3 (20%): 建立 Webots 桌上籃球遊戲機模擬系統 \n 請各分組利用CAD 系統建立一個能在電腦桌 (1600W X 700D X 740H mm) 上運作的投籃機構 ( 參考影片 )後, 導入 Webots R2025a 套件, 建立一個能由使用者透過鍵盤按鍵操作, 且具備計分板的籃球遊戲機模擬系統. \n 參考資料: \n 參考資料: \n fourbar_ball_throwing_linkage.slvs \n sixbar_ball_throwing_linkage.slvs \n \n', 'tags': '', 'url': 'Homework.html'}, {'title': 'HW1', 'text': 'HW1 (5%):  建立由 Box 組成的平面四連桿機構 Webots 模擬場景 \n 操作影片標題: 國立虎尾科技大學 - 機械設計工程系 - cd2025 HW1 -\xa041023205 \n \n Youtube網址: HW1 \n', 'tags': '', 'url': 'HW1.html'}, {'title': 'HW2', 'text': 'HW2 (5%):  建立由 CAD 繪製零件組成的平面四連桿機構 Webots 模擬場景 \n 操作影片標題: 國立虎尾科技大學 - 機械設計工程系 - cd2025 HW2 -\xa041023205 \n Youtube網址: HW2 \n', 'tags': '', 'url': 'HW2.html'}, {'title': 'HW3', 'text': 'HW3 (20%): 建立 Webots 桌上籃球遊戲機模擬系統 \n 操作影片標題: 國立虎尾科技大學 - 機械設計工程系 - cd2025 HW3 - 學員學號 \n \n', 'tags': '', 'url': 'HW3.html'}, {'title': 'Midterm', 'text': '本課程所繳交的期中成績為學員自評之學習期望成績. \n 期中考週的自評期望成績繳交流程: \n \n 整理先前所完成的各週的進度、作業網頁內容以及心得 \n 拍攝期中自評影片, 上傳至 Youtube 後, 以" 國立虎尾科技大學 - 機械設計工程系 - cd2025 期中自評- 學員學號 "為影片標題後嵌入本頁面中 \n 回填期中自評表單 \n 上傳學員期中成績 \n \n 各週進度: \n W1:建立倉儲、網站 \n W2:學員個人及組別網址 \n W3:自行製作可攜程式系統、使用 SSH 協定執行作業倉儲的推送 \n W4:新增list、ipV6g設定 \n W5:Onshape練習 \n W6: \n W7:Webots 四連桿設計、Tutorial 1~8 \n W8:HW1 \n W9:其中自評影片 \n 各週網頁內容: \n 期中心得:原本對程式相關課程很排斥但經這段時間的練習以及同組成員的幫忙，已經掌握基礎程式邏輯以及W ebots的使用。 \n 期中自評影片: https://youtu.be/7gd79tChrZ0 \n \n', 'tags': '', 'url': 'Midterm.html'}, {'title': 'Exam', 'text': 'Exam1 (10%): 建立 Webots 基本物件模擬場景 \n 各學員利用 Webots R2025a 套件中的 Shape 物件, 隨堂建立指定的機電系統模擬場景, 並利用 Python 程式進行互動控制. \n Exam2 (10%): 利用 CAD 零組件建立模擬場景\xa0 \n 各學員利用 CAD (Solvespace 與 NX2312), 隨堂建立指定的系統模型零組件後, 導入 Webots R2025a 後, 建立機電系統模擬場景, 並利用 Python 程式進行互動控制. \n Exam3 (20%): Webots 機電模擬場景的協同設計 \n 各分組利用 CAD (Solvespace 與 NX2312), 隨堂建立指定的系統模型零組件後, 導入 Webots R2025a 後, 建立機電系統模擬場景, 並利用 Python 程式進行互動控制. 過程中各學員必須採同步協同模式, 維護從 Github Classroom 取得的分組協同倉儲以及網站. \n 協同分組方式: \n \n 分配學員負責利用 Solvespace 建立系統零組件, 過程中必須將所建構之零組件檔案與繪圖過程影片上傳至分組網頁. \n 分配學員負責利用 NX2312 建立系統零組件, 過程中必須將所建構之零組件檔案與繪圖過程影片上傳至分組網頁. \n 分配學員負責利用 Webots 建立機電系統模擬場景, 並利用 Python 程式進行控制, 過程中必須將建構過程拍成帶有說明字幕的影片上傳至分組網頁. \n \n', 'tags': '', 'url': 'Exam.html'}, {'title': 'Exam1', 'text': 'Exam1 (10%): 建立 Webots 基本物件模擬場景 \n 國立虎尾科技大學 - 機械設計工程系 - cd2025 Exam1 - 41023205 \n Youtube網址: Exam1 \n \n', 'tags': '', 'url': 'Exam1.html'}, {'title': 'Exam2', 'text': 'Exam2 (10%): 利用 CAD 零組件建立模擬場景 \n 操作影片標題: 國立虎尾科技大學 - 機械設計工程系 - cd2025 Exam2 -\xa041023205 \n \n 連桿繪製 \n \n \n', 'tags': '', 'url': 'Exam2.html'}, {'title': 'Exam3', 'text': 'Exam3 (20%): Webots 機電模擬場景的協同設計 \n Exam 3-1 \n \n Youtube網址: Exam 3-1 \n 啟動個人所完成的 HW1 模擬系統步驟: \n \n 開啟ipv6 \n 在cmd輸入\xa0 webotsw --stream 開啟webots \n webots會給一個port ( INFO: Streaming server listening on port 1235. ) \n 有port之後再瀏覽器貼上 \xa0 http://[自己ipv6]:webots給的port/index.html，就能啟動串流 \n 如果要開啟組員的串流，在webots\xa0streaming viwer中的 connect to 填入組員的port號\xa0 就能看到組員畫面 \n \n Exam 3-2 \n \n Youtube網址: Exam 3-2 \n 啟動個人 七段顯示器 步驟: \n \n 開啟ipv6 \n 在cmd輸入\xa0webotsw --stream 開啟webots \n webots會給一個port (INFO: Streaming server listening on port 1236.) \n 有port之後再瀏覽器貼上\xa0 http://[自己ipv6]:webots給的port/index.html，就能啟動串流 \n 如果要開啟組員的串流，在webots\xa0streaming viwer中的 connect to 填入組員的port號\xa0 就能看到組員畫面 \n \n \n \n Exam 3-3 \n \n Youtube網址: Exam 3-3', 'tags': '', 'url': 'Exam3.html'}, {'title': 'Final', 'text': '期末協同專案執行過程影片、簡報與 PDf 報告檔案 (六人一組) (30%) \n 題目:  Webots 動態投籃模擬系統的協同設計 \n 說明:  \n 籃框架被配置在一定範圍內, 可隨機慢速前進、後退及左右擺動, 投籃機構系統帶有一定數量的籃球, 被配置在可自由移動的輪車上. \n 操作者可利用鍵盤特定按鍵控制投籃輪車的移動並發射投籃, 每投出一球後系統透過記分板進行計分, 並由送球機構進行補球或移動輪車取球, 遊戲可進行至全部數量籃球投完為止. \n 請將期末協同專案執行過程、內容與心得, 製作成影片，配合字幕上傳至 Youtube 後嵌入各階段的期末報告頁面中. \n 影片標題:  國立虎尾科技大學 - 機械設計工程系 - cd2025 期末報告 - 學員學號 - 各階段影片主題 \n', 'tags': '', 'url': 'Final.html'}, {'title': 'Brython', 'text': '1 add to 100 \n  導入 brython 程式庫  \n \n \n \n \n  啟動 Brython  \n \n \n \n  導入 FileSaver 與 filereader  \n \n \n \n \n  導入 ace  \n \n \n \n \n \n \n  導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫  \n \n \n \n \n \n \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n \n \n \n  add 1 to 100 開始  \n \n \n  add 1 to 100 結束 \n  editor1 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor1 結束   ##########################################  \n 從 1 累加到 100 part2: \n 1 add to 100 cango_three_gears BSnake AI Tetris \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n  add 1 to 100 part2 開始  \n \n \n  add 1 to 100 part2 結束 \n  editor2 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor2 結束  \n \n \n \n 從 1 累加到 100 part3: \n 1 add to 100 cango_three_gears BSnake AI Tetris \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n  add 1 to 100 part2 開始  \n \n \n  add 1 to 100 part2 結束 \n  editor2 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor2 結束  \n \n \n', 'tags': '', 'url': 'Brython.html'}]};