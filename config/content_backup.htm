<h1>About</h1>
<p>課程名稱: 協同產品設計實習 - Collaborative Product Design Practice</p>
<p>41023205的作業網站: <a href="https://mdecd2025.github.io/hw-c-ching/">https://mdecd2025.github.io/hw-c-ching/</a></p>
<p>41023205的作業倉儲:<a href="https://github.com/mdecd2025/hw-c-ching"> https://github.com/mdecd2025/hw-c-ching</a></p>
<hr/>
<p>課程代號: cd2025</p>
<p>Teams 線上教學:</p>
<p style="padding-left: 30px;">以 "學號@nfu.edu.tw" 登入<span> </span><a href="https://login.microsoftonline.com/">https://login.microsoftonline.com/</a><span> </span>Office 365</p>
<p style="padding-left: 30px;">Teams 團隊代碼: <span>p5z4eku</span></p>
<hr/>
<p>課程評分:</p>
<p style="padding-left: 30px;">Homework (30%) - 每週至少提交兩次與課程進度有關的內容, 完成後填回自評表單</p>
<p style="padding-left: 30px;">Exam (40%) - 建立包含操作流程影片、心得以及提供檔案下載的網頁後填回自評表單</p>
<p style="padding-left: 30px;">Final Report (30%) - 利用網頁內容進行簡報並提交 pdf 格式書面報告, 完成後填回自評表單</p>
<p></p>
<h1>Tasks</h1>
<h2>Tasks1</h2>
<p>自行製作可攜程式系統</p>
<p>此作業的目的在展示如何利用既有的 Python 可攜系統建立各版本的 Python 可攜環境.</p>
<!-- 假如檔案小於 5mb, 將 mp4 檔案放入 downloads 目錄後取出 -->
<div class="winkVideoContainerClass"><video autoplay="autoplay" class="winkVideoClass" controls="controls" data-dirname="/cmsimde/static" data-varname="task1" height="630" muted="true" width="1008">
<source src="./../downloads/task1.mp4" type="video/mp4"/></video></div>
<h3>list</h3>
<p>列出2b學員作業網站與倉儲連結:</p>
<p><button id="add1to100">1 add to 100</button></p>
<!-- 導入 brython 程式庫 -->
<p>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
</p>
<!-- 啟動 Brython -->
<p>
<script>
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
</script>
</p>
<p><!-- 導入 FileSaver 與 filereader --></p>
<p>
<script src="/static/ace/FileSaver.min.js" type="text/javascript"></script>
<script src="/static/ace/filereader.js" type="text/javascript"></script>
</p>
<p><!-- 導入 ace --></p>
<p>
<script src="/static/ace/ace.js" type="text/javascript"></script>
<script src="/static/ace/ext-language_tools.js" type="text/javascript"></script>
<script src="/static/ace/mode-python3.js" type="text/javascript"></script>
<script src="/static/ace/snippets/python.js" type="text/javascript"></script>
</p>
<p><!-- 導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫 -->
<script src="/static/Cango-24v03-min.js"></script>
<script src="/static/gearUtils-09.js"></script>
<script src="/static/SVGpathUtils-6v03-min.js"></script>
<script src="/static/sylvester.js"></script>
<script src="/static/PrairieDraw.js"></script>
</p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/javascript">
function doSave(storage_id, filename){
    var blob = new Blob([localStorage[storage_id]], {type: "text/plain;charset=utf-8"});
    filename = document.getElementById(filename).value
    saveAs(blob, filename+".py");
}
</script>
</p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()
Ace1 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run1():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src"]
    except:
        url = "https://gist.githubusercontent.com/c-ching/1913d70ea718413d378cca97f0668f37/raw/07f030f2ec1f93b44e61ee1605901074100c0e61/gistfile1.txt"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace1.editor.setValue(prog)
    Ace1.editor.scrollToRow(0)
    Ace1.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace1.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run1'].bind('click', Ace1.run)
doc['kw_show_console1'].bind('click', Ace1.show_console)
doc['kw_clear_console1'].bind('click', Ace1.clear_console)
doc['clear_bd1'].bind('click', clear_bd1)
# 呼叫函式執行
run1()
</script>
</p>
<p><!-- add 1 to 100 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace2 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )

add1to100_url = "https://gist.githubusercontent.com/c-ching/1913d70ea718413d378cca97f0668f37/raw/07f030f2ec1f93b44e61ee1605901074100c0e61/gistfile1.txt"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add(ev):
    Ace2.editor.setValue(add_src)
    Ace2.editor.scrollToRow(0)
    Ace2.editor.gotoLine(0)
    Ace2.run()

# id 為 "add1to100" 的按鈕點按時, 執行 add 方法
doc["add1to100"].bind('click', add)
</script>
</p>
<p><!-- add 1 to 100 結束--></p>
<!-- editor1 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor1" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src1', 'kw_filename1');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run1">Run</button> <button id="kw_show_console1">Output</button> <button id="kw_clear_console1">清除輸出區</button><button id="clear_bd1">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console1"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div1"></div>
<!-- editor1 結束 --><hr/><!-- ########################################## -->
<p>列出2b分組網站與倉儲連結:</p>
<p><button id="add1to100part2">1 add to 100</button><button id="cango_three_gears">cango_three_gears</button><button id="bsnake">BSnake</button><button id="aitetris">AI Tetris</button></p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()
Ace3 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run2():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src2"]
    except:
        url = "https://gist.githubusercontent.com/c-ching/b1651254972c964b10b6432ec6278f15/raw/483790c00c71a58f93d5a0bce3b447f57d157f37/list-2"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace3.editor.setValue(prog)
    Ace3.editor.scrollToRow(0)
    Ace3.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace3.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run2'].bind('click', Ace3.run)
doc['kw_show_console2'].bind('click', Ace3.show_console)
doc['kw_clear_console2'].bind('click', Ace3.clear_console)
doc['clear_bd2'].bind('click', clear_bd2)
# 呼叫函式執行
run2()
</script>
</p>
<p><!-- add 1 to 100 part2 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace4 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )

# 透過 Ace4 以類別建立一個通用的 button2, 可以在多個案例中將 gist 程導入編輯區

class button2:
    def __init__(self, url):
        self.url = url

    # 記得加入 event 輸入變數
    def do(self,ev):
        Ace4.editor.setValue(open(self.url).read())
        Ace4.editor.scrollToRow(0)
        Ace4.editor.gotoLine(0)
        Ace4.run()

add1to100_url = "https://gist.githubusercontent.com/c-ching/b1651254972c964b10b6432ec6278f15/raw/483790c00c71a58f93d5a0bce3b447f57d157f37/list-2"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add2(ev):
    Ace4.editor.setValue(add_src)
    Ace4.editor.scrollToRow(0)
    Ace4.editor.gotoLine(0)
    Ace4.run()

# id 為 "add1to100part2" 的按鈕點按時, 執行 add 方法
doc["add1to100part2"].bind('click', add2)
# 以下為運用 button2 class 的通用 gist 程式導入區
################################## cango_three_gears start
cango_three_gears_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/cango_three_gears_brython_div2.py"
cango_three_gears = button2(cango_three_gears_url)
doc["cango_three_gears"].bind("click", cango_three_gears.do)
################################## cango_three_gears end
################################## bsnake start
bsnake_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/kmol_snakey.py"
bsnake = button2(bsnake_url)
doc["bsnake"].bind("click", bsnake.do)
################################## bsnake end
################################## aitetris start
aitetris_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/pygame_to_brython_tetris_ai.py"
aitetris = button2(aitetris_url)
doc["aitetris"].bind("click", aitetris.do)
################################## aitetris end
</script>
</p>
<p><!-- add 1 to 100 part2 結束--></p>
<!-- editor2 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor2" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename2" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src2', 'kw_filename2');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run2">Run</button> <button id="kw_show_console2">Output</button> <button id="kw_clear_console2">清除輸出區</button><button id="clear_bd2">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console2"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div2"></div>
<div></div>
<h3>ipV6設定</h3>
<div></div>
<!-- editor2 結束 -->
<p>ipv6: 2001:288:6004:17:fff1:cd25:0000:b003</p>
<p>gateway: 2001:288:6004:17::254</p>
<p>dns server:</p>
<p>2001:288:6004:17::3</p>
<p>2001:b000:168::1</p>
<hr/>
<p>
<script src="https://unpkg.com/three@0.144.0/build/three.js" type="text/javascript"></script>
</p>
<h2>Tasks2</h2>
<h4><span>使用 SSH 協定執行作業倉儲的推送</span></h4>
<!-- 假如檔案小於 5mb, 將 mp4 檔案放入 downloads 目錄後取出 -->
<div class="winkVideoContainerClass"><video autoplay="autoplay" class="winkVideoClass" controls="controls" data-dirname="/cmsimde/static" data-varname="task2" height="630" muted="true" width="1008">
<source src="./../downloads/task2.mp4" type="video/mp4"/></video></div>
<h3>W3</h3>
<p>列出各班目前尚未納入分組的學員名單:</p>
<p><button id="add1to100">1 add to 100</button></p>
<!-- 導入 brython 程式庫 -->
<p>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
</p>
<!-- 啟動 Brython -->
<p>
<script>
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
</script>
</p>
<p><!-- 導入 FileSaver 與 filereader --></p>
<p>
<script src="/static/ace/FileSaver.min.js" type="text/javascript"></script>
<script src="/static/ace/filereader.js" type="text/javascript"></script>
</p>
<p><!-- 導入 ace --></p>
<p>
<script src="/static/ace/ace.js" type="text/javascript"></script>
<script src="/static/ace/ext-language_tools.js" type="text/javascript"></script>
<script src="/static/ace/mode-python3.js" type="text/javascript"></script>
<script src="/static/ace/snippets/python.js" type="text/javascript"></script>
</p>
<p><!-- 導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫 -->
<script src="/static/Cango-24v03-min.js"></script>
<script src="/static/gearUtils-09.js"></script>
<script src="/static/SVGpathUtils-6v03-min.js"></script>
<script src="/static/sylvester.js"></script>
<script src="/static/PrairieDraw.js"></script>
</p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/javascript">
function doSave(storage_id, filename){
    var blob = new Blob([localStorage[storage_id]], {type: "text/plain;charset=utf-8"});
    filename = document.getElementById(filename).value
    saveAs(blob, filename+".py");
}
</script>
</p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()
Ace1 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run1():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src"]
    except:
        url = "https://gist.githubusercontent.com/c-ching/9d561234431fe1313b7d405f171afda4/raw/912d3ac5b0c9d2446e0aef79e85d6cc14fc34ced/gistfile1.txt"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace1.editor.setValue(prog)
    Ace1.editor.scrollToRow(0)
    Ace1.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace1.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run1'].bind('click', Ace1.run)
doc['kw_show_console1'].bind('click', Ace1.show_console)
doc['kw_clear_console1'].bind('click', Ace1.clear_console)
doc['clear_bd1'].bind('click', clear_bd1)
# 呼叫函式執行
run1()
</script>
</p>
<p><!-- add 1 to 100 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace2 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )

add1to100_url = "https://gist.githubusercontent.com/c-ching/9d561234431fe1313b7d405f171afda4/raw/912d3ac5b0c9d2446e0aef79e85d6cc14fc34ced/gistfile1.txt"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add(ev):
    Ace2.editor.setValue(add_src)
    Ace2.editor.scrollToRow(0)
    Ace2.editor.gotoLine(0)
    Ace2.run()

# id 為 "add1to100" 的按鈕點按時, 執行 add 方法
doc["add1to100"].bind('click', add)
</script>
</p>
<p><!-- add 1 to 100 結束--></p>
<!-- editor1 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor1" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src1', 'kw_filename1');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run1">Run</button> <button id="kw_show_console1">Output</button> <button id="kw_clear_console1">清除輸出區</button><button id="clear_bd1">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console1"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div1"></div>
<!-- editor1 結束 --><hr/><!-- ########################################## --><h2>Tasks3</h2>
<h3>Onshape</h3>
<div class="winkVideoContainerClass"><video autoplay="autoplay" class="winkVideoClass" controls="controls" data-dirname="/cmsimde/static" data-varname="onshape" height="630" muted="true" width="1008">
<source src="./../downloads/onshape.mp4" type="video/mp4"/></video></div>
<h2>Tasks4</h2>
<h4><span>webots四連桿練習</span></h4>
<!-- 假如檔案小於 5mb, 將 mp4 檔案放入 downloads 目錄後取出 -->
<div class="winkVideoContainerClass"><video autoplay="autoplay" class="winkVideoClass" controls="controls" data-dirname="/cmsimde/static" data-varname="Webots-1" height="630" muted="true" width="1008">
<source src="./../downloads/Webots-1.mp4" type="video/mp4"/></video></div>
<h3>Tutorial 1</h3>
<p><a href="https://cyberbotics.com/doc/guide/tutorial-1-your-first-simulation-in-webots">https://cyberbotics.com/doc/guide/tutorial-1-your-first-simulation-in-webots</a></p>
<p><strong>教學重點摘要</strong></p>
<p><span style="color: #000000;"><strong>1.A world is stored in a file having the <code><span style="background-color: #ccffcc;">.wbt</span>,and t</code>he world files must be stored directly in a directory called <span style="background-color: #ccffcc;"><code>worlds.</code></span></strong></span></p>
<p><span style="color: #000000;"><strong><code>世界儲存在具有<span style="background-color: #ccffcc;"><code>.wbt</code></span>副檔名的檔案中且世界檔案必須直接儲存在名為的目錄中<span style="background-color: #ccffcc;"><code>worlds</code></span></code></strong></span></p>
<p><span style="color: #000000;"><strong><code></code></strong></span></p>
<p><span style="color: #000000;"><strong><code>2.Webots nodes stored in world files are organized in a tree structure called the scene tree. The scene tree can be viewed in two sub-windows of the main window: the</code><code> <span style="background-color: #ccffcc;"><a class="dynamicLoad" href="https://cyberbotics.com/doc/guide/the-3d-window" style="color: #000000; background-color: #ccffcc;">3D view</a></span> (at the center of the main window) is the 3D representation of the scene tree and the <span style="background-color: #ccffcc;"><a class="dynamicLoad" href="https://cyberbotics.com/doc/guide/the-scene-tree" style="color: #000000; background-color: #ccffcc;">scene tree view</a></span> (on the left) is the hierarchical representation of the scene tree. The <span style="background-color: #ccffcc;"><a class="dynamicLoad" href="https://cyberbotics.com/doc/guide/the-scene-tree" style="color: #000000; background-color: #ccffcc;">scene tree view</a></span> is where the nodes and fields can be modified.</code></strong></span></p>
<p><span style="color: #000000;"><strong><code>儲存在世界文件中的Webots節點以稱為場景樹的樹狀結構來組織。場景樹可以在主視窗的兩個子視窗中查看：<span style="background-color: #ccffcc;"><a class="dynamicLoad" href="https://cyberbotics.com/doc/guide/the-3d-window" style="color: #000000; background-color: #ccffcc;">3D 視圖</a></span>是場景樹的3D表示，<span style="background-color: #ccffcc;"><a class="dynamicLoad" href="https://cyberbotics.com/doc/guide/the-scene-tree" style="color: #000000; background-color: #ccffcc;">場景樹視圖</a></span>是場景樹的層次結構表示。<span style="background-color: #ccffcc;">場景<a class="dynamicLoad" href="https://cyberbotics.com/doc/guide/the-scene-tree" style="color: #000000; background-color: #ccffcc;">樹視圖</a></span>是可以修改節點和欄位的地方。</code></strong></span></p>
<ul>
<li><span style="color: #000000;"><strong><a href="https://cyberbotics.com/doc/reference/worldinfo" style="color: #000000;">WorldInfo</a>: 包含模擬的全域參數</strong></span></li>
<li><span style="color: #000000;"><strong><a href="https://cyberbotics.com/doc/reference/viewpoint" style="color: #000000;">Viewpoint</a>: 定義主視點相機參數</strong></span></li>
<li><span style="color: #000000;"><strong><a href="https://webots.cloud/run?url=https://github.com/cyberbotics/webots/blob/released/projects/objects/backgrounds/protos/TexturedBackground.proto" style="color: #000000;" target="_blank">TexturedBackground</a>: 定義場景的背景</strong></span></li>
<li><span style="color: #000000;"><strong><a href="https://webots.cloud/run?url=https://github.com/cyberbotics/webots/blob/released/projects/objects/backgrounds/protos/TexturedBackgroundLight.proto" style="color: #000000;" target="_blank">TexturedBackgroundLight</a>: 定義與上述背景相關的光</strong></span></li>
<li><span style="color: #000000;"><strong><a href="https://webots.cloud/run?url=https://github.com/cyberbotics/webots/blob/released/projects/objects/floors/protos/RectangleArena.proto" style="color: #000000;" target="_blank">RectangleArena</a>: 定義您在該場景中迄今為止看到的唯一物件</strong></span></li>
</ul>
<p><span style="color: #000000;"><strong><code>3.In the <span style="background-color: #ccffcc;"><a class="dynamicLoad" href="https://cyberbotics.com/doc/guide/the-scene-tree" style="color: #000000; background-color: #ccffcc;">scene tree view</a></span>, the fields are displayed in a different color.</code></strong></span></p>
<p><span style="color: #000000;"><strong><code>在<span style="background-color: #ccffcc;"><a class="dynamicLoad" href="https://cyberbotics.com/doc/guide/the-scene-tree" style="color: #000000; background-color: #ccffcc;">場景樹視圖</a></span>中，如果欄位與其預設值不同，則以不同的顏色顯示</code></strong></span></p>
<p><span style="color: #000000;"><strong><code>4.When a Webots world is modified with the intention of being saved, <span style="background-color: #ffff99;">it is fundamental that the simulation is first paused and reloaded to its initial state</span>, i.e. the virtual time counter on the main toolbar should <span style="background-color: #ffff99;">show 0:00:00:000</span>. Otherwise at each save, the position of each 3D object can accumulate errors. Therefore, any modification of the world should be performed in that order: <span style="background-color: #ffff99;">pause, reset, modify and save the simulation</span>.</code></strong></span></p>
<p><span style="color: #000000;"><strong><code>當修改 Webots 世界並希望保存時，<span style="background-color: #ffff99;">至關重要</span>的是首先<span style="background-color: #ffff99;">暫停模擬並重新加載到其初始狀態</span>，即主工具列上的虛擬時間計數器應<span style="background-color: #ffff99;">顯示 0:00:00:000</span>。否則，每次儲存時，每個 3D 物件的位置都會累積錯誤。因此，對世界的任何修改都應按照以下順序進行：<span style="background-color: #ffff99;">暫停、重置、修改和保存模擬</span>。</code></strong></span></p>
<p><span style="color: #000000;"><strong><code>5.The <span style="background-color: #ccffcc;"><code>controller</code></span> field of a <code>Robot</code> node specifies which controller is currently associated to the robot. <span style="background-color: #ccffcc;">Note that the same controller can be used by several robots, but a robot can only use one controller at a time.</span> Each controller is executed in a separate child process usually spawned by Webots. Because they are independent processes, controllers don't share the same address space, and may run on different processor cores.</code></strong></span></p>
<p><span style="color: #000000;"><strong><span style="background-color: #ccffcc;"><code>controller</code></span>節點的欄位指定<code>Robot</code>哪個控制器目前與機器人相關聯。請注意，<span style="background-color: #ccffcc;">同一個控制器可以被多個機器人使用，但一個機器人一次只能使用一個控制器</span>。每個控制器通常由 Webots 產生的單獨子進程中執行。由於它們是獨立的進程，因此控制器不共享相同的位址空間，並且可能在不同的處理器核心上運行。</strong></span></p>
<p><span style="color: #000000;"><strong>6.The robots wheels are often controlled using velocity. In order to control the motors of the wheels in speed you need to set the target position to the infinity and to set the desired speed</strong></span></p>
<p><span style="color: #000000;"><strong>機器人的輪子通常透過速度來控制，而不是透過位置來控制。為了控制車輪馬達的速度，您需要將目標位置設定為無限大，並設定所需的速度。</strong></span></p>
<p><span style="color: #000000;"><strong>7.Above the code area.Compilation errors are displayed in <span style="background-color: #ccffcc;">red</span> in the console. If there are any, fix them and retry to compile. Then, reload the world.</strong></span></p>
<p><span style="color: #000000;"><strong>編譯錯誤在控制台中以<span style="background-color: #ccffcc;">紅色</span>顯示。如果有的話，請修復它們並重試編譯。然後，重新加載世界。</strong></span></p>
<p><span style="color: #000000;"><strong></strong></span></p>
<h3>Tutorial 2</h3>
<p><a href="https://cyberbotics.com/doc/guide/tutorial-2-modification-of-the-environment" title="https://cyberbotics.com/doc/guide/tutorial-2-modification-of-the-environment">https://cyberbotics.com/doc/guide/tutorial-2-modification-of-the-environment</a></p>
<p></p>
<h4 class="anchor-header" id="tutorial2modificationoftheenvironment30minutes" name="tutorial-2-modification-of-the-environment-30-minutes"><strong>環境修改-教學重點摘要</strong></h4>
<h5><span style="color: #000000; background-color: #ccffff;">1. 實體節點</span></h5>
<h5><span></span><span>Webots</span>設計模擬時，一個重要的步驟是將各種實體分解為單獨的剛體。要定義剛體，您必須建立一個實體節點。在這個節點裡面你將設定與剛體的特性相對應的不同的子節點。下圖描繪了剛體及其子節點。實體節點的圖形表示由填滿其清單的形狀節點定義<span style="background-color: #ffff99;">children</span>。碰撞邊界在其欄位中定義<span style="background-color: #ffff99;">boundingObject</span>。圖形表示和碰撞形狀通常但不一定相同。最後，此<span style="background-color: #ffff99;">physics</span>欄位定義物件是屬於動態環境還是靜態環境。所有這些子節點都是可選的，但<span style="background-color: #ffff99;">physics</span>欄位需要<span style="background-color: #ffff99;">boundingObject</span>定義。</h5>
<p><img alt="" height="367" src="/images/螢幕擷取畫面 2025-04-15 085841.png" width="449"/></p>
<h5><span style="background-color: #ccffff;">2. DEF-USE機制</span></h5>
<h5>允許在一個地方定義一個節點並在場景樹的其他地方重複使用該定義。這有助於避免世界文件中相同節點的重複。此外，它還允許使用者同時修改多個物件。</h5>
<h5>更改<span style="background-color: #ffff99;">radius</span>第一個<span style="background-color: #ffff99;">Sphere</span>節點的欄位也會修改其<span style="background-color: #ffff99;">boundingObject</span>。</h5>
<h5>為了方便起見，該<span style="background-color: #ffff99;">boundingObject</span>欄位也接受<span style="background-color: #ffff99;">Shape</span>節點（而不是直接接受<span style="background-color: #ffff99;">Sphere</span>節點）。也可以在<span style="background-color: #ffff99;">Shape</span>層級使用相同的<span style="background-color: #ffff99;"> DEF-USE </span>機制，如下圖所示。目前最大的好處是能夠直接將此形狀用於圖形目的。</h5>
<p><img alt="" height="306" src="/images/DEF-USE 機制應用於固體幾何體的球體節點.png" width="450"/></p>
<h3>Tutorial 3</h3>
<p><a href="https://cyberbotics.com/doc/guide/tutorial-3-appearance">https://cyberbotics.com/doc/guide/tutorial-3-appearance</a></p>
<h4 class="anchor-header" id="tutorial3appearance20minutes" name="tutorial-3-appearance-20-minutes"><strong>外觀-教學重點摘要</strong></h4>
<h5><span style="background-color: #ccffff;"><strong>1. 燈</strong></span></h5>
<h5>照明由<span style="background-color: #ffff99;">光源節點</span>和<span style="background-color: #ffff99;">背景</span>決定。有三種類型的光源節點：<span>DirectionalLight</span>，<span>PointLight</span>和<span>SpotLight</span>。<span> DirectionalLight</span>模擬無限遠的光（例如：太陽），<span>PointLight</span>模擬從單點發出的光（例如：燈泡），<span>SpotLight</span>模擬錐形光（例如：手電筒）。</h5>
<p><img alt="" height="131" src="/images/燈.png" width="586"/></p>
<h5><span style="background-color: #ccffff;">2. 從磁碟添加紋理</span></h5>
<h5>將局部可用的紋理應用到球上</h5>
<h5><span style="background-color: #ffff99;">步驟:</span></h5>
<h5>1.新增<span style="background-color: #ffff99;">PBRAppearance</span>節點</h5>
<h5>2.在<span style="background-color: #ffff99;">PBRAppearance</span>節點的欄位中新增一個<span style="background-color: #ffff99;">ImageTexture</span>節點</h5>
<h5>3.使用按鈕將項目新增至<span style="background-color: #ffff99;">ImageTexture</span>的欄位</h5>
<h5>4.然後使用“<span style="background-color: #ffff99;">選擇</span>”按鈕設定新新增項目的值</h5>
<h5>5.按照路徑找到保存紋理的位置並選擇</h5>
<h3>Tutorial 4</h3>
<p><a href="https://cyberbotics.com/doc/guide/tutorial-4-more-about-controllers">https://cyberbotics.com/doc/guide/tutorial-4-more-about-controllers</a></p>
<h4 class="anchor-header" id="tutorial4moreaboutcontrollers30minutes" name="tutorial-4-more-about-controllers-30-minutes"><strong>關於控制器-教學重點摘要</strong></h4>
<h5><span style="background-color: #ccffff;">建立新世界與控制器步驟:</span></h5>
<h5>1. 將先前的世界儲存為 collision_avoidance.wbt。</h5>
<h5>2. 從「檔案」菜單中選擇「新建」&gt;「新建機器人控制器」，並命名為 epuck_avoid_collision。</h5>
<h5>3. 在 E-puck 節點的 controller 欄位中，將控制器設定為新建立的 epuck_avoid_collision。</h5>
<h3>Tutorial 5</h3>
<p><a href="https://cyberbotics.com/doc/guide/tutorial-5-compound-solid-and-physics-attributes">https://cyberbotics.com/doc/guide/tutorial-5-compound-solid-and-physics-attributes</a></p>
<h4 class="anchor-header" name="tutorial-5-compound-solid-and-physics-attributes-15-minutes"><strong>複合固體和物理屬性-教學重點摘要</strong></h4>
<h5 class="anchor-header" id="compoundsolid" name="compound-solid"><span style="background-color: #ccffff;">1. 複合固體</span></h5>
<h5>透過<span style="background-color: #ffff99;">聚合形狀節點</span>，可以建立比我們以前見過的更複雜的實體節點。實體的物理屬性和圖形屬性都可以由多個形狀節點組成，每個Shape節點都可以放置在Pose節點中，以改變其相對位置和方向。 群組節點也可用於對多個子節點進行分組。</h5>
<h5> <img alt="" height="397" src="/images/由多個變換幾何構成的複合實體的子節點的表示.png" width="230"/></h5>
<h5><strong><span style="background-color: #ccffff;">2. 物理屬性</span></strong></h5>
<h5>我們可以透過以下方式設定 Solid 節點的物理屬性：</h5>
<h5><span style="background-color: #ffff99;">質量與密度只能設定其中一個，另一個需設為 -1</span></h5>
<h5>1. <span style="background-color: #ffff99;">mass</span>：設定固體的總質量（單位：公斤）<br/>2. <span style="background-color: #ffff99;">density</span>：設定固體的密度（單位：公斤/立方公尺），與體積相乘得到總質量。</h5>
<h5>預設情況下，實體節點的質心設定在其原點（由實體的平移場定義）。可以使用物理節點的欄位<span style="background-color: #ffff99;">(centerOfMass)</span>來修改質心。質心是相對於固體的原點指定的。</h5>
<h5><span style="background-color: #ccffff;">3. 設定旋轉</span></h5>
<h5>透過 <span style="background-color: #ffff99;">Pose</span> 節點的 <span style="background-color: #ffff99;">rotation</span> 欄位，我們可以設定物體的旋轉:</h5>
<h5>旋轉格式：使用歐拉軸與角度表示法。</h5>
<h5>前三個值：定義旋轉軸的單位向量。</h5>
<h5>第四個值：定義繞該軸的旋轉角度（單位：弧度）。</h5>
<h5><span style="background-color: #ccffff;">4.選擇邊界物件</span></h5>
<h5><span style="background-color: #ffff99;">Sphere</span>（球體）：效率最高。</h5>
<h5><span style="background-color: #ffff99;">Box</span>（方塊）：效率較高。</h5>
<h5><span style="background-color: #ffff99;">Capsule</span>（膠囊體）：效率中等。</h5>
<h5><span style="background-color: #ffff99;">Cylinder</span>（圓柱體）：效率較低。</h5>
<h5>不建議使用<span style="background-color: #ffff99;"> IndexedFaceSet</span>，因為其效率較低，且可能存在一些問題</h5>
<h5><span style="background-color: #ccffff;">5. 設定接觸屬性</span></h5>
<h5>當兩個固體發生碰撞時，可以使用 <span style="background-color: #ffff99;">ContactProperties</span> 節點來設定接觸行為:</h5>
<h5>1.<span style="background-color: #ffff99;"> 設定材料類別</span>：透過 <span style="background-color: #ffff99;">contactMaterial</span> 欄位設定固體的材料類別。</h5>
<h5>2.<span style="background-color: #ffff99;"> 設定摩擦力</span>：在 <span style="background-color: #ffff99;">ContactProperties</span> 節點中設定 <span style="background-color: #ffff99;">coulombFriction</span> 欄位來調整摩擦力。</h5>
<h5><span style="background-color: #ccffff;">6. 設定物理參數</span></h5>
<h5>在 <span style="background-color: #ffff99;">WorldInfo</span> 節點中，可以設定以下物理參數：</h5>
<h5>1. <span style="background-color: #ffff99;">basicTimeStep</span>：設定物理步驟的時間間隔（單位：毫秒）。</h5>
<h5><span style="background-color: #ffff99;">建議值：8 至 16 毫秒</span></h5>
<h5>2. <span style="background-color: #ffff99;">ERP（Error Reduction Parameter）</span>：設定誤差修正參數。</h5>
<h5>3. <span style="background-color: #ffff99;">CFM（Constraint Force Mixing）</span>：設定約束力混合參數。</h5>
<h3>Tutorial 6</h3>
<p><a href="https://cyberbotics.com/doc/guide/tutorial-6-4-wheels-robot">https://cyberbotics.com/doc/guide/tutorial-6-4-wheels-robot</a></p>
<h4 class="anchor-header" name="tutorial-6-4-wheeled-robot-60-minutes"><strong><span style="color: #ff0000;">***</span>四輪機器人-</strong><strong>教學重點摘要<span style="color: #ff0000;">***</span></strong></h4>
<p><strong><span style="color: #ff0000;"><img alt="" height="299" src="/images/四輪機器人的高階表示.png" width="320"/></span></strong></p>
<h5><span style="background-color: #ccffff;">1. 建立機器人結構</span><br/>機器人由五個主要的 <span style="background-color: #ffff99;">Solid</span> 節點組成：</h5>
<h5>1. <span style="background-color: #ffff99;">Robot</span>（機器人本體）：作為根節點，包含車身和四個輪子。</h5>
<h5>2.<span style="background-color: #ffff99;">Wheel1</span> 至 <span style="background-color: #ffff99;">Wheel4</span>（四個輪子）：每個輪子由 <span style="background-color: #ffff99;">HingeJoint</span> 節點連接，並包含 <span style="background-color: #ffff99;">RotationalMotor</span> 來驅動。</h5>
<h5>每個輪子使用以下結構：</h5>
<ul>
<li>
<h5><span style="background-color: #ffff99;">HingeJoint</span>：定義輪子與車身的旋轉關聯。</h5>
</li>
<li>
<h5><span style="background-color: #ffff99;">Solid</span>：輪子的實體節點。</h5>
</li>
<li>
<h5><span style="background-color: #ffff99;">Shape</span>：輪子的外觀，使用 <span style="background-color: #ffff99;">Cylinder</span> 幾何形狀<span style="color: #ff0000;"></span>。</h5>
</li>
<li>
<h5><span style="background-color: #ffff99;">Physics</span>：輪子的物理屬性。</h5>
</li>
</ul>
<h5><span style="background-color: #ccffff;">2. 設定輪子參數</span><br/>每個 <span style="background-color: #ffff99;">HingeJoint</span> 節點需要設定以下參數：</h5>
<ul>
<li>
<h5><span style="background-color: #ffff99;">jointParameters</span>：設定旋轉軸的位置和方向。</h5>
</li>
<li>
<h5><span style="background-color: #ffff99;">device</span>：包含 <span style="background-color: #ffff99;">RotationalMotor</span> 節點，用於控制輪子的旋轉。</h5>
</li>
<li>
<h5><span style="background-color: #ffff99;">endPoint</span>：指向輪子的 <span style="background-color: #ffff99;">Solid</span> 節點。</h5>
</li>
</ul>
<p><img alt="" height="246" src="/images/四輪機器人的低階表示.png" width="542"/></p>
<h5><span style="background-color: #ccffff;">3. 感應器</span></h5>
<h5><span style="background-color: #ccffff;">4. 控制器</span></h5>
<h5><span style="background-color: #ccffff;">5. 控制器程式碼</span></h5>
<h3>Tutorial 7</h3>
<p><a href="https://cyberbotics.com/doc/guide/tutorial-7-your-first-proto">https://cyberbotics.com/doc/guide/tutorial-7-your-first-proto</a></p>
<h4 class="anchor-header" name="tutorial-7-your-first-proto-20-minutes"><span>第一個 PROTO-</span><strong>教學重點摘要</strong></h4>
<h5 class="anchor-header" id="copytherobotdefinition" name="copy-the-robot-definition"><span style="background-color: #ffff99;">複製機器人定義:將world檔案中對機器人的定義移至 PROTO 檔案中，且允許使用此機器人，而無需完全複製和貼上其定義</span></h5>
<h5 class="anchor-header" name="tutorial-7-your-first-proto-20-minutes"><span style="background-color: #ccffff;"><strong>1. 建立 PROTO 檔案</strong></span></h5>
<h5>在專案的<span style="background-color: #ccffcc;"> protos</span> 資料夾中建立一個名為 <span style="background-color: #ccffcc;">FourWheelsRobot.proto</span> 的新檔案。</h5>
<h5>在檔案中加入以下基本結構：</h5>
<h5>VRML_SIM R2023a utf8<br/>PROTO FourWheelsRobot [<br/> <span style="color: #ff0000;"># 在此定義可調整的欄位</span><br/>]<br/>{<br/> <span style="color: #ff0000;"># 在此放置機器人結構</span><br/>}</h5>
<h5>將先前在 <span style="background-color: #ccffcc;"><code data-end="25" data-start="5">4_wheels_robot.wbt</code></span> 中建立的<span style="background-color: #ccffcc;"> <code data-end="38" data-start="31">Robot</code> </span>節點（包含其子節點）複製並貼上至 <span style="background-color: #ccffcc;"><code data-end="63" data-start="56">PROTO</code> 的 <code data-end="70" data-start="66">{}</code> 區塊中</span></h5>
<h5 class="anchor-header" id="usetheprotonode" name="use-the-proto-node"><span style="background-color: #ccffff;">2. 使用 PROTO 節點</span></h5>
<p><span style="background-color: #ccffff;"><img alt="" height="233" src="/images/PROTO 現在顯示在「新增節點」視窗中.png" width="450"/></span></p>
<h5><span style="background-color: #ccffff;">3. 新增字段</span></h5>
<ul>
<li>
<h5>在 <span style="background-color: #ccffcc;">PROTO</span> 節點中介面中"<span style="color: #ff0000;"><code><span color="#ff0000" style="color: #ff0000;">[</span><span face="Verdana, Arial, Helvetica, sans-serif" style="font-family: Verdana, Arial, Helvetica, sans-serif;">  </span></code></span><span style="color: #ff0000;"><code>]</code></span><code>"</code><code>之間的部分</code>新增欄位並將它們與內部欄位連結起來</h5>
</li>
<li>
<h5>要連結字段，應該使用<span style="background-color: #ccffcc;"> IS</span> 關鍵字，只需將<span style="background-color: #ccffcc;">Robot</span>節點的<span style="background-color: #ccffcc;">translation x y z</span>和字段替換為：<span style="background-color: #ccffcc;">rotation x y z angle</span><span style="background-color: #ccffcc;"></span></h5>
</li>
<li>
<h5>Robot節點的Physicsmass節點的字段由以下方式設定：</h5>
<pre><span style="background-color: #ccffcc;"><code>mass IS bodyMass</code></span></pre>
</li>
</ul>
<h3>Tutorial 8</h3>
<p><a href="https://cyberbotics.com/doc/guide/tutorial-8-the-supervisor">https://cyberbotics.com/doc/guide/tutorial-8-the-supervisor</a></p>
<h5 class="anchor-header" name="tutorial-8-the-supervisor-30-minutes">The Supervisor<span>-</span><strong>教學重點摘要</strong></h5>
<h5><span style="background-color: #ccffff;"><strong>1. </strong>設定環境並新增Supervisor</span></h5>
<h5>1.創建一個新的 <span style="background-color: #ccffcc;">Webots</span> 專案資料夾，命名為 <span style="background-color: #ccffcc;">my_supervisor</span>。</h5>
<h5>2.在專案中建立一個新的世界檔案 <span style="background-color: #ccffcc;">my_supervisor.wbt</span>，並添加一個矩形地板作為場景。</h5>
<h5>3.將機器人加入場景，並刪除其內建的控制器。</h5>
<h5>4.新增一個名為<span style="background-color: #ccffcc;"> supervisor</span> 的機器人節點，並將其<span style="background-color: #ccffcc;"> supervisor</span> 欄位設為 <span style="background-color: #ccffcc;">TRUE</span>。</h5>
<h5>5.為 <span style="background-color: #ccffcc;">supervisor</span> 機器人創建一個新的控制器 <span style="background-color: #ccffcc;">supervisor_controller.py</span>，並將其指定為 <span style="background-color: #ccffcc;">supervisor</span> 的控制器。</h5>
<h5><span style="background-color: #ccffff;">2. 使用Supervisor移動物體</span></h5>
<h2>Tasks5</h2>
<h3>obj.檔案匯入</h3>
<p>1.先將會製好的圖檔匯出成<span style="background-color: #ffff99;">obj.</span>檔</p>
<p><img alt="" height="276" src="/images/籃球框1.png" width="396"/></p>
<p>2.打開webot 首先:新增 Robot &gt;在<span>Robot裡新增children&gt;在children裡新增Solid &gt; 在 Solid 裡新增 children</span></p>
<p>&gt; 在<span>children裡新增Shape&gt;接著在Shape下的 geometry NULL 裡新增 Mesh &gt;最後滑鼠點url兩下即可新增檔案</span></p>
<p><span><img alt="" height="311" src="/images/螢幕擷取畫面 2025-04-29 111239.png" width="492"/></span></p>
<p></p><h2>Tasks6</h2>
<h1>Homework</h1>
<p>作業 (30%)</p>
<p>HW1 (5%): <span style="background-color: #ffff00;">建立由 Box 組成的平面四連桿機構 Webots 模擬場景</span></p>
<p style="padding-left: 30px;">part1:</p>
<p style="padding-left: 60px;">請各學員在 USB 隨身碟或個人電腦上完成 cd2025 課程所需的可攜系統配置:</p>
<p style="padding-left: 90px;">下載 <a href="http://229.cycu.org/portable_wcm2025.7z">portable_wcm2025.7z</a> (330MB, 解開壓縮後 1.4GB)</p>
<p style="padding-left: 90px;"><a href="http://229.cycu.org/Webots_2025a.7z">Webots_2025a.7z</a> (1.5 GB, 解開後約為 2.9GB, 可單獨運作)</p>
<p style="padding-left: 90px;"><a href="http://229.cycu.org/Webots_2025a_web.7z">Webots_2025a_web.7z</a> (171 MB, 解開壓縮後約為 1GB, 必須連網運作)</p>
<p style="padding-left: 90px;"><a href="http://229.cycu.org/Blender4.2.7z">Blender4.2.7z</a></p>
<p style="padding-left: 30px;">part2:</p>
<p style="padding-left: 60px;">請各學員完成可攜程式系統配置後, 利用 Webots R2025a 中寬度與高度都為 0.1m 的 box 物件建立一個簡單的平面四連桿機構模擬場景.</p>
<p style="padding-left: 60px;">base (基座) 長度 1m, link1 長度 0.4m, link2 長度 0.6m, link3 長度 0.9m, 各轉軸均為 HingeJoint, joint1 旋轉速度設定為 1radian/sec.</p>
<p style="padding-left: 30px;">part3:</p>
<p style="padding-left: 60px;">模擬場景啟動後, 按下 s 鍵機構開始作動, 按下 p 鍵後機構暫停.</p>
<p style="padding-left: 30px;">參考資料:</p>
<p style="padding-left: 60px;"><a href="/downloads/cd2025_hw1_demo.7z">cd2025_hw1_demo.7z</a></p>
<p>HW2 (5%): <span style="background-color: #ffff00;">建立由 CAD 繪製零件組成的平面四連桿機構 Webots 模擬場景</span></p>
<p style="padding-left: 30px;">各學員請利用 CAD 系統依據 HW1 的連桿尺寸與運動方式, 配置適當大小的旋轉軸以及基座後, 利用 Webots R2025a 完成一個簡單的平面四連桿機構模擬場景.</p>
<p style="padding-left: 30px;">參考資料:</p>
<p style="padding-left: 60px;"><a href="/downloads/fourbar_slvs.7z">fourbar_slvs.7z</a></p>
<p>HW3 (20%):<span style="background-color: #ffff00;">建立 Webots 桌上籃球遊戲機模擬系統</span></p>
<p style="padding-left: 30px;">請各分組利用CAD 系統建立一個能在電腦桌 (1600W X 700D X 740H mm) 上運作的投籃機構 (<a href="https://www.youtube.com/watch?v=LloG_Jn_TI0&amp;t=51s">參考影片</a>)後, 導入 Webots R2025a 套件, 建立一個能由使用者透過鍵盤按鍵操作, 且具備計分板的籃球遊戲機模擬系統.</p>
<p style="padding-left: 30px;">參考資料:</p>
<p>參考資料:</p>
<p style="padding-left: 30px;"><a href="/downloads/fourbar_ball_throwing_linkage.slvs">fourbar_ball_throwing_linkage.slvs</a></p>
<p style="padding-left: 30px;"><a href="/downloads/sixbar_ball_throwing_linkage.slvs">sixbar_ball_throwing_linkage.slvs</a></p>
<p style="padding-left: 30px;"><img alt="" height="264" src="/images/fourbar_ball_throwing_linkage.gif" width="400"/></p>
<h2>HW1</h2>
<p>HW1 (5%): <span style="background-color: #ffff00;">建立由 Box 組成的平面四連桿機構 Webots 模擬場景</span></p>
<p>操作影片標題: 國立虎尾科技大學 - 機械設計工程系 - cd2025 HW1 - 41023205</p>
<p></p>
<p>Youtube網址:<a href="https://youtu.be/FK8DdgBNT1s">HW1</a></p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="315" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/FK8DdgBNT1s?si=ELF8REjW87o6Z4MD" title="YouTube video player" width="560"></iframe></p><h2>HW2</h2>
<p>HW2 (5%): <span style="background-color: #ffff00;">建立由 CAD 繪製零件組成的平面四連桿機構 Webots 模擬場景</span></p>
<p>操作影片標題: 國立虎尾科技大學 - 機械設計工程系 - cd2025 HW2 - 41023205</p>
<p><span>Youtube網址:<a href="https://youtu.be/nmUue6WX41g">HW2</a></span></p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="315" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/nmUue6WX41g?si=bQkw2FIGxPsjnnB8" title="YouTube video player" width="560"></iframe></p><h2>HW3</h2>
<p>HW3 (20%):<span style="background-color: #ffff00;">建立 Webots 桌上籃球遊戲機模擬系統</span></p>
<p>操作影片標題: 國立虎尾科技大學 - 機械設計工程系 - cd2025 HW3 - 學員學號</p>
<p></p>
<h1>Midterm</h1>
<p>本課程所繳交的期中成績為學員自評之學習期望成績.</p>
<p>期中考週的自評期望成績繳交流程:</p>
<ol>
<li>整理先前所完成的各週的進度、作業網頁內容以及心得</li>
<li>拍攝期中自評影片, 上傳至 Youtube 後, 以"<span style="background-color: #ffff00;">國立虎尾科技大學 - 機械設計工程系 - cd2025 期中自評- 學員學號</span>"為影片標題後嵌入本頁面中</li>
<li>回填期中自評表單</li>
<li>上傳學員期中成績</li>
</ol>
<p>各週進度:</p>
<p>W1:建立倉儲、網站</p>
<p>W2:學員個人及組別網址</p>
<p>W3:自行製作可攜程式系統、使用 SSH 協定執行作業倉儲的推送</p>
<p>W4:新增list、ipV6g設定</p>
<p>W5:Onshape練習</p>
<p>W6:</p>
<p>W7:Webots 四連桿設計、Tutorial 1~8</p>
<p>W8:HW1</p>
<p>W9:其中自評影片</p>
<p>各週網頁內容:</p>
<p>期中心得:原本對程式相關課程很排斥但經這段時間的練習以及同組成員的幫忙，已經掌握基礎程式邏輯以及W<span>ebots的使用。</span></p>
<p>期中自評影片:<a href="https://youtu.be/7gd79tChrZ0">https://youtu.be/7gd79tChrZ0</a></p>
<p></p>
<p style="padding-left: 30px;"></p><h1>Exam</h1>
<p>Exam1 (10%): 建立 Webots 基本物件模擬場景</p>
<p style="padding-left: 30px;">各學員利用 Webots R2025a 套件中的 Shape 物件, 隨堂建立指定的機電系統模擬場景, 並利用 Python 程式進行互動控制.</p>
<p>Exam2 (10%): 利用 CAD 零組件建立模擬場景 </p>
<p style="padding-left: 30px;">各學員利用 CAD (Solvespace 與 NX2312), 隨堂建立指定的系統模型零組件後, 導入 Webots R2025a 後, 建立機電系統模擬場景, 並利用 Python 程式進行互動控制.</p>
<p>Exam3 (20%): Webots 機電模擬場景的協同設計</p>
<p style="padding-left: 30px;">各分組利用 CAD (Solvespace 與 NX2312), 隨堂建立指定的系統模型零組件後, 導入 Webots R2025a 後, 建立機電系統模擬場景, 並利用 Python 程式進行互動控制. 過程中各學員必須採同步協同模式, 維護從 Github Classroom 取得的分組協同倉儲以及網站.</p>
<p style="padding-left: 30px;">協同分組方式:</p>
<ol>
<li>分配學員負責利用 Solvespace 建立系統零組件, 過程中必須將所建構之零組件檔案與繪圖過程影片上傳至分組網頁.</li>
<li>分配學員負責利用 NX2312 建立系統零組件, 過程中必須將所建構之零組件檔案與繪圖過程影片上傳至分組網頁.</li>
<li>分配學員負責利用 Webots 建立機電系統模擬場景, 並利用 Python 程式進行控制, 過程中必須將建構過程拍成帶有說明字幕的影片上傳至分組網頁.</li>
</ol>
<h2>Exam1</h2>
<p>Exam1 (10%): 建立 Webots 基本物件模擬場景</p>
<p><span>國立虎尾科技大學 - 機械設計工程系 - cd2025 Exam1 - 41023205</span></p>
<p><span>Youtube網址:<a href="https://youtu.be/o1Q16eOclZk">Exam1</a></span></p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="315" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/o1Q16eOclZk?si=yI8dY1B-u37DQNAV" title="YouTube video player" width="560"></iframe></p>
<p><img alt="" height="424" src="/images/螢幕擷取畫面 2025-05-31 224830.png" width="534"/></p><h2>Exam2</h2>
<p>Exam2 (10%): 利用 CAD 零組件建立模擬場景</p>
<p>操作影片標題: 國立虎尾科技大學 - 機械設計工程系 - cd2025 Exam2 - 41023205</p>
<p><a href="https://youtu.be/Gm0uct5PxqM">連桿繪製</a></p>
<p></p><h2>Exam3</h2>
<p>Exam3 (20%): Webots 機電模擬場景的協同設計</p>
<p>操作影片標題: 國立虎尾科技大學 - 機械設計工程系 - cd2025 Exam3 - 學員學號</p>
<h1>Final</h1>
<p><span>期末協同專案執行過程影片、簡報與 PDf 報告檔案 (六人一組) (30%)</span></p>
<p><span>題目: <span style="background-color: #ccffcc;">Webots 動態投籃模擬系統的協同設計</span></span></p>
<p><span>說明: </span></p>
<p style="padding-left: 30px;"><span>籃框架被配置在一定範圍內, 可隨機慢速前進、後退及左右擺動, 投籃機構系統帶有一定數量的籃球, 被配置在可自由移動的輪車上.</span></p>
<p style="padding-left: 30px;"><span>操作者可利用鍵盤特定按鍵控制投籃輪車的移動並發射投籃, 每投出一球後系統透過記分板進行計分, 並由送球機構進行補球或移動輪車取球, 遊戲可進行至全部數量籃球投完為止.</span></p>
<p>請將期末協同專案執行過程、內容與心得, 製作成影片，配合字幕上傳至 Youtube 後嵌入各階段的期末報告頁面中.</p>
<p>影片標題: <span style="background-color: #ffff00;">國立虎尾科技大學 - 機械設計工程系 - cd2025 期末報告 - 學員學號 - 各階段影片主題<br/></span></p>
<h1>Brython</h1>
<p><button id="add1to100">1 add to 100</button></p>
<!-- 導入 brython 程式庫 -->
<p>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
</p>
<!-- 啟動 Brython -->
<p>
<script>
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
</script>
</p>
<p><!-- 導入 FileSaver 與 filereader --></p>
<p>
<script src="/static/ace/FileSaver.min.js" type="text/javascript"></script>
<script src="/static/ace/filereader.js" type="text/javascript"></script>
</p>
<p><!-- 導入 ace --></p>
<p>
<script src="/static/ace/ace.js" type="text/javascript"></script>
<script src="/static/ace/ext-language_tools.js" type="text/javascript"></script>
<script src="/static/ace/mode-python3.js" type="text/javascript"></script>
<script src="/static/ace/snippets/python.js" type="text/javascript"></script>
</p>
<p><!-- 導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫 -->
<script src="/static/Cango-24v03-min.js"></script>
<script src="/static/gearUtils-09.js"></script>
<script src="/static/SVGpathUtils-6v03-min.js"></script>
<script src="/static/sylvester.js"></script>
<script src="/static/PrairieDraw.js"></script>
</p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/javascript">
function doSave(storage_id, filename){
    var blob = new Blob([localStorage[storage_id]], {type: "text/plain;charset=utf-8"});
    filename = document.getElementById(filename).value
    saveAs(blob, filename+".py");
}
</script>
</p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()
Ace1 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run1():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace1.editor.setValue(prog)
    Ace1.editor.scrollToRow(0)
    Ace1.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace1.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run1'].bind('click', Ace1.run)
doc['kw_show_console1'].bind('click', Ace1.show_console)
doc['kw_clear_console1'].bind('click', Ace1.clear_console)
doc['clear_bd1'].bind('click', clear_bd1)
# 呼叫函式執行
run1()
</script>
</p>
<p><!-- add 1 to 100 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace2 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add(ev):
    Ace2.editor.setValue(add_src)
    Ace2.editor.scrollToRow(0)
    Ace2.editor.gotoLine(0)
    Ace2.run()

# id 為 "add1to100" 的按鈕點按時, 執行 add 方法
doc["add1to100"].bind('click', add)
</script>
</p>
<p><!-- add 1 to 100 結束--></p>
<!-- editor1 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor1" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src1', 'kw_filename1');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run1">Run</button> <button id="kw_show_console1">Output</button> <button id="kw_clear_console1">清除輸出區</button><button id="clear_bd1">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console1"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div1"></div>
<!-- editor1 結束 --><hr/><!-- ########################################## -->
<p>從 1 累加到 100 part2:</p>
<p><button id="add1to100part2">1 add to 100</button><button id="cango_three_gears">cango_three_gears</button><button id="bsnake">BSnake</button><button id="aitetris">AI Tetris</button></p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()
Ace3 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run2():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src2"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace3.editor.setValue(prog)
    Ace3.editor.scrollToRow(0)
    Ace3.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace3.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run2'].bind('click', Ace3.run)
doc['kw_show_console2'].bind('click', Ace3.show_console)
doc['kw_clear_console2'].bind('click', Ace3.clear_console)
doc['clear_bd2'].bind('click', clear_bd2)
# 呼叫函式執行
run2()
</script>
</p>
<p><!-- add 1 to 100 part2 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace4 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )

# 透過 Ace4 以類別建立一個通用的 button2, 可以在多個案例中將 gist 程導入編輯區

class button2:
    def __init__(self, url):
        self.url = url

    # 記得加入 event 輸入變數
    def do(self,ev):
        Ace4.editor.setValue(open(self.url).read())
        Ace4.editor.scrollToRow(0)
        Ace4.editor.gotoLine(0)
        Ace4.run()

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add2(ev):
    Ace4.editor.setValue(add_src)
    Ace4.editor.scrollToRow(0)
    Ace4.editor.gotoLine(0)
    Ace4.run()

# id 為 "add1to100part2" 的按鈕點按時, 執行 add 方法
doc["add1to100part2"].bind('click', add2)
# 以下為運用 button2 class 的通用 gist 程式導入區
################################## cango_three_gears start
cango_three_gears_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/cango_three_gears_brython_div2.py"
cango_three_gears = button2(cango_three_gears_url)
doc["cango_three_gears"].bind("click", cango_three_gears.do)
################################## cango_three_gears end
################################## bsnake start
bsnake_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/kmol_snakey.py"
bsnake = button2(bsnake_url)
doc["bsnake"].bind("click", bsnake.do)
################################## bsnake end
################################## aitetris start
aitetris_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/pygame_to_brython_tetris_ai.py"
aitetris = button2(aitetris_url)
doc["aitetris"].bind("click", aitetris.do)
################################## aitetris end
</script>
</p>
<p><!-- add 1 to 100 part2 結束--></p>
<!-- editor2 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor2" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename2" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src2', 'kw_filename2');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run2">Run</button> <button id="kw_show_console2">Output</button> <button id="kw_clear_console2">清除輸出區</button><button id="clear_bd2">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console2"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div2"></div>
<!-- editor2 結束 --><hr/>
<p>
<script src="https://unpkg.com/three@0.144.0/build/three.js" type="text/javascript"></script>
</p>
<p>從 1 累加到 100 part3:</p>
<p><button id="add1to100part2">1 add to 100</button><button id="cango_three_gears">cango_three_gears</button><button id="bsnake">BSnake</button><button id="aitetris">AI Tetris</button></p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()
Ace3 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run2():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src2"]
    except:
        url = "https://gist.github.com/c-ching/cb2f9010f3da19b6a3ac5cb12dc70a8d.js.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace3.editor.setValue(prog)
    Ace3.editor.scrollToRow(0)
    Ace3.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace3.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run2'].bind('click', Ace3.run)
doc['kw_show_console2'].bind('click', Ace3.show_console)
doc['kw_clear_console2'].bind('click', Ace3.clear_console)
doc['clear_bd2'].bind('click', clear_bd2)
# 呼叫函式執行
run2()
</script>
</p>
<p><!-- add 1 to 100 part2 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace4 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )

# 透過 Ace4 以類別建立一個通用的 button2, 可以在多個案例中將 gist 程導入編輯區

class button2:
    def __init__(self, url):
        self.url = url

    # 記得加入 event 輸入變數
    def do(self,ev):
        Ace4.editor.setValue(open(self.url).read())
        Ace4.editor.scrollToRow(0)
        Ace4.editor.gotoLine(0)
        Ace4.run()

add1to100_url = "https://gist.github.com/c-ching/cb2f9010f3da19b6a3ac5cb12dc70a8d.js.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add2(ev):
    Ace4.editor.setValue(add_src)
    Ace4.editor.scrollToRow(0)
    Ace4.editor.gotoLine(0)
    Ace4.run()

# id 為 "add1to100part2" 的按鈕點按時, 執行 add 方法
doc["add1to100part2"].bind('click', add2)
# 以下為運用 button2 class 的通用 gist 程式導入區
################################## cango_three_gears start
cango_three_gears_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/cango_three_gears_brython_div2.py"
cango_three_gears = button2(cango_three_gears_url)
doc["cango_three_gears"].bind("click", cango_three_gears.do)
################################## cango_three_gears end
################################## bsnake start
bsnake_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/kmol_snakey.py"
bsnake = button2(bsnake_url)
doc["bsnake"].bind("click", bsnake.do)
################################## bsnake end
################################## aitetris start
aitetris_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/pygame_to_brython_tetris_ai.py"
aitetris = button2(aitetris_url)
doc["aitetris"].bind("click", aitetris.do)
################################## aitetris end
</script>
</p>
<p><!-- add 1 to 100 part2 結束--></p>
<!-- editor2 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor2" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename2" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src2', 'kw_filename2');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run2">Run</button> <button id="kw_show_console2">Output</button> <button id="kw_clear_console2">清除輸出區</button><button id="clear_bd2">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console2"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div2"></div>
<!-- editor2 結束 --><hr/>
<p>
<script src="https://unpkg.com/three@0.144.0/build/three.js" type="text/javascript"></script>
</p>